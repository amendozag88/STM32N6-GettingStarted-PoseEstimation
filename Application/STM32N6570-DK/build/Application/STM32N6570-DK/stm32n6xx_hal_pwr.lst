ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 4
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"stm32n6xx_hal_pwr.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c"
  25              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  26              		.align	1
  27              		.global	HAL_PWR_DeInit
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	HAL_PWR_DeInit:
  33              	.LFB835:
   1:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
   2:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
   3:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @file    stm32n6xx_hal_pwr.c
   4:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @author  MCD Application Team
   5:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *           + Initialization/De-Initialization Functions.
   9:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *           + Peripheral Control Functions.
  10:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *           + PWR Attributes Functions.
  11:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  12:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
  13:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @attention
  14:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  15:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * Copyright (c) 2023 STMicroelectronics.
  16:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * All rights reserved.
  17:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  18:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  19:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * in the root directory of this software component.
  20:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  21:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
  22:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
  23:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   @verbatim
  24:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  25:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                         ##### PWR peripheral overview #####
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 2


  26:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  27:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   [..]
  28:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) The Power control (PWR) provides an overview of the supply architecture
  29:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        for the different power domains and of the supply configuration
  30:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        controller.
  31:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  32:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Several low-power modes are available to save power when the CPU does not need to
  33:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        execute code :
  34:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Sleep   (CPU clock stopped and still in RUN mode)
  35:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Stop    (System clock stopped)
  36:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Standby (System powered down)
  37:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  38:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  39:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                         ##### How to use this driver #####
  40:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ==============================================================================
  41:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   [..]
  42:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  43:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableBkUpAccess() and HAL_PWR_DisableBkUpAccess() functions
  44:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        to enable/disable access to the backup domain (RCC Backup domain control
  45:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        register RCC_BDCR, RTC registers, TAMP registers, backup registers and
  46:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        backup SRAM).
  47:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  48:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_ConfigPVD() after setting parameters to be configured (event
  49:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        mode and voltage threshold) in order to set up the Programmed Voltage
  50:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Detector, then use HAL_PWR_EnablePVD() and HAL_PWR_DisablePVD()
  51:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        functions to start and stop the PVD detection.
  52:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (+) PVD level on PVD_IN is compared to the internal VREFINT level.
  53:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        PVDO flag is available in PWR_CR2 to indicate if the voltage level
  54:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        on PVD_IN is higher or lower than the PVD threshold.
  55:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  56:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableWakeUpPin() and HAL_PWR_DisableWakeUpPin() functions
  57:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        with the right parameter to configure the wake up pin polarity (Low or
  58:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        High), the wake up pin selection and to enable and disable it.
  59:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  60:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWREx_GetWakeupFlag() and HAL_PWREx_ClearWakeupFlag()
  61:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        functions to manage wake-up flag for the selected pin.
  62:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  63:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnterSLEEPMode() function to enter the CPU in Sleep mode.
  64:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Wake-up from Sleep mode could be following to an event or an
  65:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interrupt according to low power mode intrinsic request called (__WFI()
  66:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        or __WFE()).
  67:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  68:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnterSTOPMode() function to enter the whole system to Stop
  69:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        mode. Wake-up from Stop mode could be following to an event or an
  70:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interrupt according to low power mode intrinsic request called (__WFI()
  71:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        or __WFE()). (Regulator state on STM32N6 devices is managed internally but
  72:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        regulator parameter is kept for product compatibility).
  73:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  74:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnterSTANDBYMode() function to enter the whole system in
  75:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Standby mode. Wake-up from Standby mode can be following only by an
  76:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interrupt.
  77:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  78:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableSleepOnExit() and HAL_PWR_DisableSleepOnExit() APIs to
  79:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        enable and disable the Cortex-M55 re-entry in Sleep mode after an
  80:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        interruption handling is over.
  81:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  82:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_EnableSEVOnPend() and HAL_PWR_DisableSEVOnPend() functions
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 3


  83:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        to configure the Cortex-M55 to wake-up after any pending event / interrupt
  84:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        even if it's disabled or has insufficient priority to cause exception
  85:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        entry.
  86:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  87:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_WAKEUP_PIN_IRQHandler() function to handle all wake-up
  88:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        pins interrupts.
  89:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  90:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    (#) Call HAL_PWR_ConfigAttributes() function to configure PWR item secure and
  91:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        privilege attributes and call HAL_PWR_GetConfigAttributes() function to
  92:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        get the attribute configuration for the selected item.
  93:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  94:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      *** PWR HAL driver macros list ***
  95:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      =============================================
  96:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      [..]
  97:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        Below the list of most used macros in PWR HAL driver.
  98:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
  99:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) __HAL_PWR_GET_FLAG()   : Get the PWR pending flags.
 100:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) __HAL_PWR_CLEAR_FLAG() : Clear the PWR pending flags.
 101:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 102:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   @endverbatim
 103:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   ******************************************************************************
 104:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 105:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 106:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
 107:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #include "stm32n6xx_hal.h"
 108:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 109:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @addtogroup STM32N6xx_HAL_Driver
 110:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 111:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 112:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 113:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR PWR
 114:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR HAL module driver
 115:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 116:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 117:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 118:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined (HAL_PWR_MODULE_ENABLED)
 119:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 120:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
 121:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
 122:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 123:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Private_Defines PWR Private Defines
 124:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 125:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 126:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 127:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
 128:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 129:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 130:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_MODE_IT                    (0x00010000U)                           /*!< Mask for interr
 131:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_MODE_EVT                   (0x00020000U)                           /*!< Mask for event 
 132:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_RISING_EDGE                (0x00000001U)                           /*!< Mask for rising
 133:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_FALLING_EDGE               (0x00000002U)                           /*!< Mask for fallin
 134:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #define PVD_RISING_FALLING_EDGE        (0x00000003U)                           /*!< Mask for rising
 135:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 136:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 137:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 138:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 139:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 4


 140:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 141:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 142:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 143:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
 144:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
 145:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 146:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /* Exported functions --------------------------------------------------------*/
 147:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 148:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
 149:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 150:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 151:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 152:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and De-Initialization Functions
 153:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *  @brief   Initialization and de-Initialization functions
 154:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 155:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @verbatim
 156:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 157:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               ##### Initialization and De-Initialization Functions #####
 158:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 159:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 160:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       This section provides functions allowing to deinitialize power peripheral.
 161:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 162:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 163:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       After system reset, the backup domain (RCC Backup domain control register
 164:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       RCC_BDCR, RTC registers, TAMP registers, backup registers and backup SRAM)
 165:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       is protected against possible unwanted write accesses.
 166:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The HAL_PWR_EnableBkUpAccess() function enables the access to the backup
 167:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       domain.
 168:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The HAL_PWR_DisableBkUpAccess() function disables the access to the backup
 169:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       domain.
 170:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 171:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @endverbatim
 172:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 173:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 174:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 175:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 176:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Deinitialize the HAL PWR peripheral registers to their default reset
 177:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         values.
 178:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This functionality is not available in this product.
 179:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         The prototype is kept just to maintain compatibility with other
 180:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         products.
 181:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 182:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 183:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 184:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
  34              		.loc 1 184 1 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              		@ link register save eliminated.
 185:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
  39              		.loc 1 185 1 view .LVU1
  40 0000 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE835:
  44              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  45              		.align	1
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 5


  46              		.global	HAL_PWR_EnableBkUpAccess
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  51              	HAL_PWR_EnableBkUpAccess:
  52              	.LFB836:
 186:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 187:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 188:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable access to the backup domain (RCC Backup domain control
 189:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
 190:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         and backup SRAM).
 191:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   After a system reset, the backup domain is protected against
 192:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         possible unwanted write accesses.
 193:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 194:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 195:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 196:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
  53              		.loc 1 196 1 view -0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
 197:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   WRITE_REG(PWR->DBPCR, PWR_DBPCR_DBP);
  58              		.loc 1 197 3 view .LVU3
  59 0000 0122     		movs	r2, #1
  60 0002 014B     		ldr	r3, .L3
  61 0004 DA62     		str	r2, [r3, #44]
 198:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
  62              		.loc 1 198 1 is_stmt 0 view .LVU4
  63 0006 7047     		bx	lr
  64              	.L4:
  65              		.align	2
  66              	.L3:
  67 0008 00480256 		.word	1442990080
  68              		.cfi_endproc
  69              	.LFE836:
  71              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  72              		.align	1
  73              		.global	HAL_PWR_DisableBkUpAccess
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  78              	HAL_PWR_DisableBkUpAccess:
  79              	.LFB837:
 199:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 200:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 201:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable access to the backup domain (RCC Backup domain control
 202:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
 203:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         and backup SRAM).
 204:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 205:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 206:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 207:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
  80              		.loc 1 207 1 is_stmt 1 view -0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 6


  84              		@ link register save eliminated.
 208:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_REG(PWR->DBPCR);
  85              		.loc 1 208 3 view .LVU6
  86 0000 0022     		movs	r2, #0
  87 0002 014B     		ldr	r3, .L6
  88 0004 DA62     		str	r2, [r3, #44]
 209:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
  89              		.loc 1 209 1 is_stmt 0 view .LVU7
  90 0006 7047     		bx	lr
  91              	.L7:
  92              		.align	2
  93              	.L6:
  94 0008 00480256 		.word	1442990080
  95              		.cfi_endproc
  96              	.LFE837:
  98              		.section	.rodata.HAL_PWR_ConfigPVD.str1.1,"aMS",%progbits,1
  99              	.LC0:
 100 0000 2E2E2F2E 		.ascii	"../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/"
 100      2E2F5354 
 100      4D333243 
 100      7562655F 
 100      46575F4E 
 101 0033 5372632F 		.ascii	"Src/stm32n6xx_hal_pwr.c\000"
 101      73746D33 
 101      326E3678 
 101      785F6861 
 101      6C5F7077 
 102              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 103              		.align	1
 104              		.global	HAL_PWR_ConfigPVD
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 109              	HAL_PWR_ConfigPVD:
 110              	.LVL0:
 111              	.LFB838:
 210:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 211:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 212:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 213:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 214:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 215:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control Functions
 216:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *  @brief   Power Control functions
 217:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 218:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @verbatim
 219:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 220:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                  ##### Peripheral Control Functions #####
 221:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 222:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 223:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       This section provides functions allowing to control power peripheral.
 224:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 225:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     *** PVD configuration ***
 226:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     =========================
 227:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 228:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it
 229:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           to the internal VREFINT.
 230:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 7


 231:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD is higher or lower
 232:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 233:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           line 66 to generate an interrupt if enabled.
 234:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           It is configurable through __HAL_PWR_PVD_EXTI_ENABLE_IT() macro.
 235:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 236:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) The PVD is stopped in STANDBY mode.
 237:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 238:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     *** Wake-up pin configuration ***
 239:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     =================================
 240:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 241:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Wake-up pin is used to wake up the system from STANDBY mode.
 242:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           The pin pull is configurable through the WKUPEPR register to be in
 243:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           No-pull, Pull-up and Pull-down.
 244:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           The pin polarity is configurable through the WKUPEPR register to be
 245:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           active on rising or falling edges.
 246:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 247:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) There are up to four Wake-up pin in the STM32N6 devices family.
 248:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 249:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     *** Low Power modes configuration ***
 250:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     =====================================
 251:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 252:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      The device present 3 principles low-power modes :
 253:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) SLEEP mode   : Cortex-M55 is stopped and all PWR domains are remaining
 254:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          active (Powered and Clocked).
 255:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 256:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) STOP mode    : Cortex-M55 is stopped, clocks are stopped and the
 257:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          regulator is running. The Main regulator or the LP
 258:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          regulator could be selected.
 259:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 260:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) STANDBY mode : All PWR domains enter DSTANDBY mode and the VCORE
 261:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                          supply regulator is powered off.
 262:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 263:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** SLEEP mode ***
 264:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    ==================
 265:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 266:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Entry:
 267:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         The SLEEP mode is entered by using the HAL_PWR_EnterSLEEPMode(Regulator,
 268:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         SLEEPEntry) function.
 269:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 270:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction.
 271:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction.
 272:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR: enter SLEEP mode with WFE instruction
 273:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                                                 and no clear of pending event.
 274:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 275:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       -@@- The Regulator parameter is not used for the STM32N6 family
 276:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               and is kept as parameter just to maintain compatibility with the
 277:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               lower power families.
 278:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 279:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Exit:
 280:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         Any peripheral interrupt acknowledged by the nested vectored interrupt
 281:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         controller (NVIC) can wake up the device from SLEEP mode.
 282:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 283:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** STOP mode ***
 284:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    =================
 285:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 286:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       In system STOP mode, the CPU clock is stopped. All CPU subsystem peripheral
 287:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       clocks are stopped too.
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 8


 288:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 289:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       To minimize the consumption in STOP mode, FLASH can be powered off before
 290:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       entering the STOP mode using the HAL_PWREx_EnableFlashPowerDown() function.
 291:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       It can be switched on again by software after exiting the STOP mode using
 292:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       the HAL_PWREx_DisableFlashPowerDown() function.
 293:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Entry:
 294:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          The STOP mode is entered using the HAL_PWR_EnterSTOPMode(Regulator,
 295:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          STOPEntry) function with:
 296:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          (++) Regulator:
 297:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_MAINREGULATOR_ON: Main regulator ON.
 298:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                 This parameter is not used for the STM32N6 family and is kept as parameter
 299:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                 just to maintain compatibility with the lower power families.
 300:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          (++) STOPEntry:
 301:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_STOPENTRY_WFI: enter STOP mode with WFI instruction.
 302:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_STOPENTRY_WFE: enter STOP mode with WFE instruction.
 303:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****           (+++) PWR_STOPENTRY_WFE_NO_EVT_CLEAR: enter STOP mode with WFE instruction
 304:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                                                 and no clear of pending event.
 305:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 306:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (+) Exit:
 307:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 308:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 309:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** STANDBY mode ***
 310:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    ====================
 311:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 312:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     (+)
 313:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The system STANDBY mode allows to achieve the lowest power consumption.
 314:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       It is based on the Cortex-M55 deep SLEEP mode, with the voltage regulator
 315:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       disabled. The system is consequently powered off. The PLL, the HSI
 316:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       oscillator and the HSE oscillator are also switched off. SRAM and register
 317:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       contents are lost except for the RTC registers, RTC backup registers,
 318:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       backup SRAM and standby circuitry.
 319:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 320:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 321:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The voltage regulator is OFF.
 322:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 323:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Entry:
 324:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         (+++) The STANDBY mode is entered using the HAL_PWR_EnterSTANDBYMode()
 325:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               function.
 326:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 327:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Exit:
 328:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****         (+++) WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B),
 329:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               RTC wakeup, tamper event, time stamp event, external reset in NRST
 330:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****               pin, IWDG reset.
 331:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 332:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 333:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****    =============================================
 334:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 335:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      (+) The MCU can be woken up from low-power mode by an RTC Alarm event, an
 336:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          RTC Wakeup event, a tamper event or a time-stamp event, without
 337:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****          depending on an external interrupt (Auto-wakeup mode).
 338:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 339:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      (+) RTC auto-wakeup (AWU) from the STOP and STANDBY modes
 340:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 341:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        (++) To wake up from the STOP mode with an RTC alarm event, it is
 342:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             necessary to configure the RTC to generate the RTC alarm using the
 343:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             HAL_RTC_SetAlarm_IT() function.
 344:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 9


 345:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        (++) To wake up from the STOP mode with an RTC Tamper or time stamp event,
 346:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             it is necessary to configure the RTC to detect the tamper or time
 347:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             stamp event using the HAL_RTCEx_SetTimeStamp_IT() or
 348:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             HAL_RTCEx_SetTamper_IT() functions.
 349:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 350:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****        (++) To wake up from the STOP mode with an RTC WakeUp event, it is
 351:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             necessary to configure the RTC to generate the RTC WakeUp event
 352:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             using the HAL_RTCEx_SetWakeUpTimer_IT() function.
 353:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 354:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @endverbatim
 355:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 356:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 357:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 358:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 359:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Configure the voltage threshold detected by the Programmed Voltage
 360:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         Detector (PVD).
 361:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
 362:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      PVD configuration information (EventMode).
 363:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 364:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 365:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(const PWR_PVDTypeDef *pConfigPVD)
 366:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 112              		.loc 1 366 1 is_stmt 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 367:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 368:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));
 116              		.loc 1 368 3 view .LVU9
 117 0000 0368     		ldr	r3, [r0]
 118 0002 244A     		ldr	r2, .L33
 366:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 119              		.loc 1 366 1 is_stmt 0 view .LVU10
 120 0004 10B5     		push	{r4, lr}
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 4, -8
 123              		.cfi_offset 14, -4
 124 0006 9342     		cmp	r3, r2
 366:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 125              		.loc 1 366 1 view .LVU11
 126 0008 0446     		mov	r4, r0
 127 000a 09D8     		bhi	.L9
 128 000c B3F5803F 		cmp	r3, #65536
 129 0010 0BD8     		bhi	.L10
 130              		.loc 1 368 3 discriminator 4 view .LVU12
 131 0012 53B1     		cbz	r3, .L10
 132              	.L12:
 133              		.loc 1 368 3 discriminator 5 view .LVU13
 134 0014 4FF4B871 		mov	r1, #368
 135 0018 1F48     		ldr	r0, .L33+4
 136              	.LVL1:
 137              		.loc 1 368 3 discriminator 5 view .LVU14
 138 001a FFF7FEFF 		bl	assert_failed
 139              	.LVL2:
 140 001e 04E0     		b	.L10
 141              	.LVL3:
 142              	.L9:
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 10


 143              		.loc 1 368 3 discriminator 5 view .LVU15
 144 0020 A3F50033 		sub	r3, r3, #131072
 145 0024 013B     		subs	r3, r3, #1
 146 0026 022B     		cmp	r3, #2
 147 0028 F4D8     		bhi	.L12
 148              	.LVL4:
 149              	.L10:
 369:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 370:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Disable PVD Event/Interrupt */
 371:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 150              		.loc 1 371 3 is_stmt 1 view .LVU16
 151 002a 1C4B     		ldr	r3, .L33+8
 152 002c D3F8A420 		ldr	r2, [r3, #164]
 153 0030 22F00402 		bic	r2, r2, #4
 154 0034 C3F8A420 		str	r2, [r3, #164]
 372:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 155              		.loc 1 372 3 view .LVU17
 156 0038 D3F8A020 		ldr	r2, [r3, #160]
 157 003c 22F00402 		bic	r2, r2, #4
 158 0040 C3F8A020 		str	r2, [r3, #160]
 373:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 159              		.loc 1 373 3 view .LVU18
 160 0044 1A6C     		ldr	r2, [r3, #64]
 161 0046 22F00402 		bic	r2, r2, #4
 162 004a 1A64     		str	r2, [r3, #64]
 374:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 163              		.loc 1 374 3 view .LVU19
 164 004c 5A6C     		ldr	r2, [r3, #68]
 165 004e 22F00402 		bic	r2, r2, #4
 166 0052 5A64     		str	r2, [r3, #68]
 375:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 376:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Configure the PVD in interrupt mode */
 377:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 167              		.loc 1 377 3 view .LVU20
 168              		.loc 1 377 18 is_stmt 0 view .LVU21
 169 0054 2268     		ldr	r2, [r4]
 170              		.loc 1 377 6 view .LVU22
 171 0056 D403     		lsls	r4, r2, #15
 172              	.LVL5:
 378:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 379:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 173              		.loc 1 379 5 is_stmt 1 view .LVU23
 174 0058 42BF     		ittt	mi
 175 005a D3F8A010 		ldrmi	r1, [r3, #160]
 176 005e 41F00401 		orrmi	r1, r1, #4
 177 0062 C3F8A010 		strmi	r1, [r3, #160]
 380:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 381:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 382:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Configure the PVD in event mode */
 383:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 178              		.loc 1 383 3 view .LVU24
 179              		.loc 1 383 6 is_stmt 0 view .LVU25
 180 0066 9003     		lsls	r0, r2, #14
 384:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 385:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 181              		.loc 1 385 5 is_stmt 1 view .LVU26
 182 0068 42BF     		ittt	mi
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 11


 183 006a D3F8A410 		ldrmi	r1, [r3, #164]
 184 006e 41F00401 		orrmi	r1, r1, #4
 185 0072 C3F8A410 		strmi	r1, [r3, #164]
 386:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 387:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 388:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Rising edge configuration */
 389:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 186              		.loc 1 389 3 view .LVU27
 187              		.loc 1 389 6 is_stmt 0 view .LVU28
 188 0076 D107     		lsls	r1, r2, #31
 390:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 391:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 189              		.loc 1 391 5 is_stmt 1 view .LVU29
 190 0078 41BF     		itttt	mi
 191 007a 0849     		ldrmi	r1, .L33+8
 192 007c 0B6C     		ldrmi	r3, [r1, #64]
 193 007e 43F00403 		orrmi	r3, r3, #4
 194 0082 0B64     		strmi	r3, [r1, #64]
 392:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 393:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 394:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Falling edge configuration */
 395:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 195              		.loc 1 395 3 view .LVU30
 196              		.loc 1 395 6 is_stmt 0 view .LVU31
 197 0084 9307     		lsls	r3, r2, #30
 396:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 397:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 198              		.loc 1 397 5 is_stmt 1 view .LVU32
 199 0086 41BF     		itttt	mi
 200 0088 044A     		ldrmi	r2, .L33+8
 201 008a 536C     		ldrmi	r3, [r2, #68]
 202 008c 43F00403 		orrmi	r3, r3, #4
 203 0090 5364     		strmi	r3, [r2, #68]
 398:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 399:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 204              		.loc 1 399 1 is_stmt 0 view .LVU33
 205 0092 10BD     		pop	{r4, pc}
 206              	.L34:
 207              		.align	2
 208              	.L33:
 209 0094 03000100 		.word	65539
 210 0098 00000000 		.word	.LC0
 211 009c 00500256 		.word	1442992128
 212              		.cfi_endproc
 213              	.LFE838:
 215              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 216              		.align	1
 217              		.global	HAL_PWR_EnablePVD
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 222              	HAL_PWR_EnablePVD:
 223              	.LFB839:
 400:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 401:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 402:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable the programmable voltage detector (PVD).
 403:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 12


 404:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 405:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 406:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 224              		.loc 1 406 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 407:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(PWR->CR2, PWR_CR2_PVDEN);
 229              		.loc 1 407 3 view .LVU35
 230 0000 024A     		ldr	r2, .L36
 231 0002 5368     		ldr	r3, [r2, #4]
 232 0004 43F00103 		orr	r3, r3, #1
 233 0008 5360     		str	r3, [r2, #4]
 408:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 234              		.loc 1 408 1 is_stmt 0 view .LVU36
 235 000a 7047     		bx	lr
 236              	.L37:
 237              		.align	2
 238              	.L36:
 239 000c 00480256 		.word	1442990080
 240              		.cfi_endproc
 241              	.LFE839:
 243              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 244              		.align	1
 245              		.global	HAL_PWR_DisablePVD
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 250              	HAL_PWR_DisablePVD:
 251              	.LFB840:
 409:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 410:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 411:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable the programmable voltage detector (PVD).
 412:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 413:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 414:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 415:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 252              		.loc 1 415 1 is_stmt 1 view -0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 416:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDEN);
 257              		.loc 1 416 3 view .LVU38
 258 0000 024A     		ldr	r2, .L39
 259 0002 5368     		ldr	r3, [r2, #4]
 260 0004 23F00103 		bic	r3, r3, #1
 261 0008 5360     		str	r3, [r2, #4]
 417:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 262              		.loc 1 417 1 is_stmt 0 view .LVU39
 263 000a 7047     		bx	lr
 264              	.L40:
 265              		.align	2
 266              	.L39:
 267 000c 00480256 		.word	1442990080
 268              		.cfi_endproc
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 13


 269              	.LFE840:
 271              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 272              		.align	1
 273              		.global	HAL_PWR_EnableWakeUpPin
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 278              	HAL_PWR_EnableWakeUpPin:
 279              	.LVL6:
 280              	.LFB841:
 418:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 419:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 420:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable the WakeUp PINx functionality.
 421:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpPinPolarity : Specifies which Wake-Up pin to enable.
 422:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following legacy values, which
 423:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          sets the default (rising edge):
 424:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_PIN1,
 425:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2,
 426:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3,
 427:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4.
 428:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          or one of the following values where the user can explicitly states
 429:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          the enabled pin and the chosen polarity:
 430:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_PIN1_HIGH, PWR_WAKEUP_PIN1_LOW,
 431:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2_HIGH, PWR_WAKEUP_PIN2_LOW,
 432:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3_HIGH, PWR_WAKEUP_PIN3_LOW,
 433:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4_HIGH, PWR_WAKEUP_PIN4_LOW.
 434:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
 435:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 436:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 437:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
 438:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 281              		.loc 1 438 1 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 439:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 440:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
 285              		.loc 1 440 3 view .LVU41
 286 0000 40F20113 		movw	r3, #257
 287 0004 9842     		cmp	r0, r3
 438:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 288              		.loc 1 438 1 is_stmt 0 view .LVU42
 289 0006 10B5     		push	{r4, lr}
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
 438:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 293              		.loc 1 438 1 view .LVU43
 294 0008 0446     		mov	r4, r0
 295 000a 1CD0     		beq	.L42
 296 000c B0F5817F 		cmp	r0, #258
 297 0010 0DD2     		bcs	.L43
 298 0012 431E     		subs	r3, r0, #1
 299 0014 072B     		cmp	r3, #7
 300 0016 04D8     		bhi	.L44
 301 0018 4FF48B73 		mov	r3, #278
 302 001c C340     		lsrs	r3, r3, r0
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 14


 303 001e DB07     		lsls	r3, r3, #31
 304 0020 11D4     		bmi	.L42
 305              	.L44:
 306              		.loc 1 440 3 discriminator 11 view .LVU44
 307 0022 4FF4DC71 		mov	r1, #440
 308 0026 0A48     		ldr	r0, .L45
 309              	.LVL7:
 310              		.loc 1 440 3 discriminator 11 view .LVU45
 311 0028 FFF7FEFF 		bl	assert_failed
 312              	.LVL8:
 313 002c 0BE0     		b	.L42
 314              	.LVL9:
 315              	.L43:
 316              		.loc 1 440 3 discriminator 11 view .LVU46
 317 002e 40F20443 		movw	r3, #1028
 318 0032 9842     		cmp	r0, r3
 319 0034 07D0     		beq	.L42
 320 0036 40F60803 		movw	r3, #2056
 321 003a 9842     		cmp	r0, r3
 322 003c 03D0     		beq	.L42
 323 003e 40F20223 		movw	r3, #514
 324 0042 9842     		cmp	r0, r3
 325 0044 EDD1     		bne	.L44
 326              	.LVL10:
 327              	.L42:
 441:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 442:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /*
 443:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      Enable and Specify the Wake-Up pin polarity and the pull configuration
 444:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****      for the event detection (rising or falling edge).
 445:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 446:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(PWR->WKUPEPR, WakeUpPinPolarity);
 328              		.loc 1 446 3 is_stmt 1 view .LVU47
 329 0046 034A     		ldr	r2, .L45+4
 330 0048 936D     		ldr	r3, [r2, #88]
 331 004a 2343     		orrs	r3, r3, r4
 332 004c 9365     		str	r3, [r2, #88]
 447:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 333              		.loc 1 447 1 is_stmt 0 view .LVU48
 334 004e 10BD     		pop	{r4, pc}
 335              	.LVL11:
 336              	.L46:
 337              		.loc 1 447 1 view .LVU49
 338              		.align	2
 339              	.L45:
 340 0050 00000000 		.word	.LC0
 341 0054 00480256 		.word	1442990080
 342              		.cfi_endproc
 343              	.LFE841:
 345              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 346              		.align	1
 347              		.global	HAL_PWR_DisableWakeUpPin
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 352              	HAL_PWR_DisableWakeUpPin:
 353              	.LVL12:
 354              	.LFB842:
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 15


 448:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 449:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 450:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable the WakeUp PINx functionality.
 451:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpPinx : Specifies the Power Wake-Up pin to disable.
 452:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 453:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_PIN1,
 454:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2,
 455:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3,
 456:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4,
 457:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN1_HIGH, PWR_WAKEUP_PIN1_LOW,
 458:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN2_HIGH, PWR_WAKEUP_PIN2_LOW,
 459:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN3_HIGH, PWR_WAKEUP_PIN3_LOW,
 460:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                 PWR_WAKEUP_PIN4_HIGH, PWR_WAKEUP_PIN4_LOW.
 461:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 462:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 463:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 464:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 355              		.loc 1 464 1 is_stmt 1 view -0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 465:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 466:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 359              		.loc 1 466 3 view .LVU51
 360 0000 40F20113 		movw	r3, #257
 361 0004 9842     		cmp	r0, r3
 464:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 362              		.loc 1 464 1 is_stmt 0 view .LVU52
 363 0006 10B5     		push	{r4, lr}
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 4, -8
 366              		.cfi_offset 14, -4
 464:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 367              		.loc 1 464 1 view .LVU53
 368 0008 0446     		mov	r4, r0
 369 000a 1CD0     		beq	.L48
 370 000c B0F5817F 		cmp	r0, #258
 371 0010 0DD2     		bcs	.L49
 372 0012 431E     		subs	r3, r0, #1
 373 0014 072B     		cmp	r3, #7
 374 0016 04D8     		bhi	.L50
 375 0018 4FF48B73 		mov	r3, #278
 376 001c C340     		lsrs	r3, r3, r0
 377 001e DB07     		lsls	r3, r3, #31
 378 0020 11D4     		bmi	.L48
 379              	.L50:
 380              		.loc 1 466 3 discriminator 11 view .LVU54
 381 0022 4FF4E971 		mov	r1, #466
 382 0026 0C48     		ldr	r0, .L51
 383              	.LVL13:
 384              		.loc 1 466 3 discriminator 11 view .LVU55
 385 0028 FFF7FEFF 		bl	assert_failed
 386              	.LVL14:
 387 002c 0BE0     		b	.L48
 388              	.LVL15:
 389              	.L49:
 390              		.loc 1 466 3 discriminator 11 view .LVU56
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 16


 391 002e 40F20443 		movw	r3, #1028
 392 0032 9842     		cmp	r0, r3
 393 0034 07D0     		beq	.L48
 394 0036 40F60803 		movw	r3, #2056
 395 003a 9842     		cmp	r0, r3
 396 003c 03D0     		beq	.L48
 397 003e 40F20223 		movw	r3, #514
 398 0042 9842     		cmp	r0, r3
 399 0044 EDD1     		bne	.L50
 400              	.LVL16:
 401              	.L48:
 467:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 468:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Disable the wake up pin selected */
 469:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
 402              		.loc 1 469 3 is_stmt 1 view .LVU57
 403 0046 054A     		ldr	r2, .L51+4
 404 0048 04F00F04 		and	r4, r4, #15
 405              	.LVL17:
 406              		.loc 1 469 3 is_stmt 0 view .LVU58
 407 004c 936D     		ldr	r3, [r2, #88]
 408 004e 23EA0403 		bic	r3, r3, r4
 409 0052 9365     		str	r3, [r2, #88]
 470:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 410              		.loc 1 470 1 view .LVU59
 411 0054 10BD     		pop	{r4, pc}
 412              	.L52:
 413 0056 00BF     		.align	2
 414              	.L51:
 415 0058 00000000 		.word	.LC0
 416 005c 00480256 		.word	1442990080
 417              		.cfi_endproc
 418              	.LFE842:
 420              		.section	.text.HAL_PWR_GetWakeupFlag,"ax",%progbits
 421              		.align	1
 422              		.global	HAL_PWR_GetWakeupFlag
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 427              	HAL_PWR_GetWakeupFlag:
 428              	.LVL18:
 429              	.LFB843:
 471:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 472:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 473:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief Get the Wake-Up Pin pending flags.
 474:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpFlag : Specifies the Wake-Up PIN flag to be checked.
 475:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 476:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG1    : Get wakeup event received from PA0.
 477:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG2    : Get wakeup event received from PA2.
 478:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG3    : Get wakeup event received from PC13.
 479:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG4    : Get wakeup event received from PD2.
 480:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Get Wakeup event received from all
 481:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                                       wake up pins.
 482:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval The Wake-Up pin flag.
 483:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 484:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** uint32_t HAL_PWR_GetWakeupFlag(uint32_t WakeUpFlag)
 485:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 430              		.loc 1 485 1 is_stmt 1 view -0
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 17


 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 486:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 487:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_FLAG(WakeUpFlag));
 434              		.loc 1 487 3 view .LVU61
 435 0000 0F28     		cmp	r0, #15
 485:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 436              		.loc 1 485 1 is_stmt 0 view .LVU62
 437 0002 10B5     		push	{r4, lr}
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 4, -8
 440              		.cfi_offset 14, -4
 485:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 441              		.loc 1 485 1 view .LVU63
 442 0004 0446     		mov	r4, r0
 443 0006 04D8     		bhi	.L54
 444 0008 48F21613 		movw	r3, #33046
 445 000c C340     		lsrs	r3, r3, r0
 446 000e DB07     		lsls	r3, r3, #31
 447 0010 04D4     		bmi	.L55
 448              	.L54:
 449              		.loc 1 487 3 discriminator 4 view .LVU64
 450 0012 40F2E711 		movw	r1, #487
 451 0016 0348     		ldr	r0, .L56
 452              	.LVL19:
 453              		.loc 1 487 3 discriminator 4 view .LVU65
 454 0018 FFF7FEFF 		bl	assert_failed
 455              	.LVL20:
 456              	.L55:
 488:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 489:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Return the wake up pin flag */
 490:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   return (PWR->WKUPSR & WakeUpFlag);
 457              		.loc 1 490 3 is_stmt 1 view .LVU66
 458              		.loc 1 490 14 is_stmt 0 view .LVU67
 459 001c 024B     		ldr	r3, .L56+4
 460 001e 586D     		ldr	r0, [r3, #84]
 491:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 461              		.loc 1 491 1 view .LVU68
 462 0020 2040     		ands	r0, r0, r4
 463 0022 10BD     		pop	{r4, pc}
 464              	.LVL21:
 465              	.L57:
 466              		.loc 1 491 1 view .LVU69
 467              		.align	2
 468              	.L56:
 469 0024 00000000 		.word	.LC0
 470 0028 00480256 		.word	1442990080
 471              		.cfi_endproc
 472              	.LFE843:
 474              		.section	.text.HAL_PWR_ClearWakeupFlag,"ax",%progbits
 475              		.align	1
 476              		.global	HAL_PWR_ClearWakeupFlag
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 481              	HAL_PWR_ClearWakeupFlag:
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 18


 482              	.LVL22:
 483              	.LFB844:
 492:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 493:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 494:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief Clear the Wake-Up pin pending flag.
 495:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
 496:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 497:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG1    : Clear the wakeup event received from PA0.
 498:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG2    : Clear the wakeup event received from PA2.
 499:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG3    : Clear the wakeup event received from PC13.
 500:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG4    : Clear the wakeup event received from PD2.
 501:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Clear the wakeup events received from all
 502:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                                       wake up pins.
 503:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval HAL status.
 504:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 505:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_ClearWakeupFlag(uint32_t WakeUpFlag)
 506:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 484              		.loc 1 506 1 is_stmt 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 507:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameter */
 508:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_FLAG(WakeUpFlag));
 488              		.loc 1 508 3 view .LVU71
 489 0000 0F28     		cmp	r0, #15
 506:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameter */
 490              		.loc 1 506 1 is_stmt 0 view .LVU72
 491 0002 10B5     		push	{r4, lr}
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 4, -8
 494              		.cfi_offset 14, -4
 506:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameter */
 495              		.loc 1 506 1 view .LVU73
 496 0004 0446     		mov	r4, r0
 497 0006 04D8     		bhi	.L59
 498 0008 48F21613 		movw	r3, #33046
 499 000c C340     		lsrs	r3, r3, r0
 500 000e DB07     		lsls	r3, r3, #31
 501 0010 04D4     		bmi	.L60
 502              	.L59:
 503              		.loc 1 508 3 discriminator 4 view .LVU74
 504 0012 4FF4FE71 		mov	r1, #508
 505 0016 0548     		ldr	r0, .L61
 506              	.LVL23:
 507              		.loc 1 508 3 discriminator 4 view .LVU75
 508 0018 FFF7FEFF 		bl	assert_failed
 509              	.LVL24:
 510              	.L60:
 509:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 510:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear the wake up event received from wake up pin x */
 511:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   WRITE_REG(PWR->WKUPCR, WakeUpFlag);
 511              		.loc 1 511 3 is_stmt 1 view .LVU76
 512 001c 044B     		ldr	r3, .L61+4
 513 001e 1C65     		str	r4, [r3, #80]
 512:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 513:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check if the wake up event is well cleared */
 514:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((PWR->WKUPSR & WakeUpFlag) != 0U)
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 19


 514              		.loc 1 514 3 view .LVU77
 515              		.loc 1 514 11 is_stmt 0 view .LVU78
 516 0020 5B6D     		ldr	r3, [r3, #84]
 517              		.loc 1 514 6 view .LVU79
 518 0022 2342     		tst	r3, r4
 515:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 516:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     return HAL_ERROR;
 517:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 518:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 519:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   return HAL_OK;
 520:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 519              		.loc 1 520 1 view .LVU80
 520 0024 14BF     		ite	ne
 521 0026 0120     		movne	r0, #1
 522 0028 0020     		moveq	r0, #0
 523 002a 10BD     		pop	{r4, pc}
 524              	.LVL25:
 525              	.L62:
 526              		.loc 1 520 1 view .LVU81
 527              		.align	2
 528              	.L61:
 529 002c 00000000 		.word	.LC0
 530 0030 00480256 		.word	1442990080
 531              		.cfi_endproc
 532              	.LFE844:
 534              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 535              		.align	1
 536              		.global	HAL_PWR_EnterSLEEPMode
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 541              	HAL_PWR_EnterSLEEPMode:
 542              	.LVL26:
 543              	.LFB845:
 521:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 522:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 523:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enter the current core in SLEEP mode (CSLEEP).
 524:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Regulator : NA in this family project
 525:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         Specifies the regulator state in SLEEP mode.
 526:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This parameter is not used for the STM32N6 family and is kept as
 527:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         parameter just to maintain compatibility with the lower power
 528:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         families.
 529:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  SLEEPEntry : Specifies if SLEEP mode is entered with WFI or WFE
 530:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      intrinsic instruction.
 531:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 532:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI :             Enter SLEEP mode with WFI instruction.
 533:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE :             Enter SLEEP mode with WFE instruction.
 534:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR: Enter SLEEP mode with WFE and no clear of pend
 535:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 536:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Ensure to clear pending events before calling this API through
 537:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
 538:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 539:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 540:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 541:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 544              		.loc 1 541 1 is_stmt 1 view -0
 545              		.cfi_startproc
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 20


 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 542:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 543:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   UNUSED(Regulator);
 548              		.loc 1 543 3 view .LVU83
 544:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 545:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 546:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 549              		.loc 1 546 3 view .LVU84
 550 0000 4B1E     		subs	r3, r1, #1
 551 0002 022B     		cmp	r3, #2
 541:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 552              		.loc 1 541 1 is_stmt 0 view .LVU85
 553 0004 10B5     		push	{r4, lr}
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 4, -8
 556              		.cfi_offset 14, -4
 541:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 557              		.loc 1 541 1 view .LVU86
 558 0006 0C46     		mov	r4, r1
 559              		.loc 1 546 3 view .LVU87
 560 0008 04D9     		bls	.L64
 561              		.loc 1 546 3 discriminator 1 view .LVU88
 562 000a 40F22221 		movw	r1, #546
 563              	.LVL27:
 564              		.loc 1 546 3 discriminator 1 view .LVU89
 565 000e 0948     		ldr	r0, .L71
 566              	.LVL28:
 567              		.loc 1 546 3 discriminator 1 view .LVU90
 568 0010 FFF7FEFF 		bl	assert_failed
 569              	.LVL29:
 570              	.L64:
 547:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 548:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 549:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 571              		.loc 1 549 3 is_stmt 1 view .LVU91
 572 0014 084A     		ldr	r2, .L71+4
 550:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 551:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Sleep mode entry */
 552:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 573              		.loc 1 552 6 is_stmt 0 view .LVU92
 574 0016 012C     		cmp	r4, #1
 549:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 575              		.loc 1 549 3 view .LVU93
 576 0018 1369     		ldr	r3, [r2, #16]
 577 001a 23F00403 		bic	r3, r3, #4
 578 001e 1361     		str	r3, [r2, #16]
 579              		.loc 1 552 3 is_stmt 1 view .LVU94
 580              		.loc 1 552 6 is_stmt 0 view .LVU95
 581 0020 01D1     		bne	.L65
 553:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 554:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 555:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFI();
 582              		.loc 1 555 5 is_stmt 1 view .LVU96
 583              		.syntax unified
 584              	@ 555 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 585 0022 30BF     		wfi
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 21


 586              	@ 0 "" 2
 587              		.thumb
 588              		.syntax unified
 589              	.L63:
 556:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 557:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 558:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 559:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 560:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 561:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       /* Clear all pending event */
 562:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __SEV();
 563:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __WFE();
 564:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 565:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 566:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Event */
 567:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFE();
 568:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 569:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 590              		.loc 1 569 1 is_stmt 0 view .LVU97
 591 0024 10BD     		pop	{r4, pc}
 592              	.LVL30:
 593              	.L65:
 559:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 594              		.loc 1 559 5 is_stmt 1 view .LVU98
 559:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 595              		.loc 1 559 7 is_stmt 0 view .LVU99
 596 0026 032C     		cmp	r4, #3
 597 0028 01D0     		beq	.L67
 562:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __WFE();
 598              		.loc 1 562 7 is_stmt 1 view .LVU100
 599              		.syntax unified
 600              	@ 562 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 601 002a 40BF     		sev
 602              	@ 0 "" 2
 563:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 603              		.loc 1 563 7 view .LVU101
 604              	@ 563 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 605 002c 20BF     		wfe
 606              	@ 0 "" 2
 607              		.thumb
 608              		.syntax unified
 609              	.L67:
 567:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 610              		.loc 1 567 5 view .LVU102
 611              		.syntax unified
 612              	@ 567 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 613 002e 20BF     		wfe
 614              	@ 0 "" 2
 615              		.loc 1 569 1 is_stmt 0 view .LVU103
 616              		.thumb
 617              		.syntax unified
 618 0030 F8E7     		b	.L63
 619              	.L72:
 620 0032 00BF     		.align	2
 621              	.L71:
 622 0034 00000000 		.word	.LC0
 623 0038 00ED00E0 		.word	-536810240
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 22


 624              		.cfi_endproc
 625              	.LFE845:
 627              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 628              		.align	1
 629              		.global	HAL_PWR_EnterSTOPMode
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 634              	HAL_PWR_EnterSTOPMode:
 635              	.LVL31:
 636              	.LFB846:
 570:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 571:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 572:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enter the whole system to Stop mode.
 573:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This API will enter the system in STOP mode
 574:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Regulator : This parameter is not used for this product family.
 575:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             and is kept as parameter just to maintain compatibility with the
 576:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             lower power families.
 577:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 578:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                     intrinsic instruction.
 579:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 580:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI              : Enter STOP mode with WFI instruction.
 581:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE              : Enter STOP mode with WFE instruction.
 582:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP  mode with WFE and no clear of pend
 583:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   In System STOP mode, all I/O pins keep the same state as in Run mode.
 584:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   When exiting System STOP mode by issuing an interrupt or a wakeup
 585:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         event, the HSI RC oscillator is selected as default system wakeup
 586:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         clock.
 587:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   In System STOP mode, when the voltage regulator operates in low
 588:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         power mode, an additional startup delay is incurred when the system
 589:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         is waking up. By keeping the internal regulator ON during STOP mode,
 590:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         the consumption is higher although the startup time is reduced.
 591:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 592:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 593:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 594:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 637              		.loc 1 594 1 is_stmt 1 view -0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 595:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 596:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 597:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   UNUSED(Regulator);
 641              		.loc 1 597 3 view .LVU105
 598:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 599:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 600:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 642              		.loc 1 600 3 view .LVU106
 643 0000 4B1E     		subs	r3, r1, #1
 644 0002 022B     		cmp	r3, #2
 594:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 645              		.loc 1 594 1 is_stmt 0 view .LVU107
 646 0004 10B5     		push	{r4, lr}
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 4, -8
 649              		.cfi_offset 14, -4
 594:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 23


 650              		.loc 1 594 1 view .LVU108
 651 0006 0C46     		mov	r4, r1
 652              		.loc 1 600 3 view .LVU109
 653 0008 04D9     		bls	.L74
 654              		.loc 1 600 3 discriminator 1 view .LVU110
 655 000a 4FF41671 		mov	r1, #600
 656              	.LVL32:
 657              		.loc 1 600 3 discriminator 1 view .LVU111
 658 000e 0F48     		ldr	r0, .L81
 659              	.LVL33:
 660              		.loc 1 600 3 discriminator 1 view .LVU112
 661 0010 FFF7FEFF 		bl	assert_failed
 662              	.LVL34:
 663              	.L74:
 601:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 602:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Stop mode when device enters Deepsleep */
 603:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS);
 664              		.loc 1 603 3 is_stmt 1 view .LVU113
 665 0014 0E4A     		ldr	r2, .L81+4
 666 0016 136B     		ldr	r3, [r2, #48]
 667 0018 23F00103 		bic	r3, r3, #1
 668 001c 1363     		str	r3, [r2, #48]
 604:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 605:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 606:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 669              		.loc 1 606 3 view .LVU114
 670 001e 0D4B     		ldr	r3, .L81+8
 671 0020 1A69     		ldr	r2, [r3, #16]
 672 0022 42F00402 		orr	r2, r2, #4
 673 0026 1A61     		str	r2, [r3, #16]
 607:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 608:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Ensure that all instructions are done before entering STOP mode */
 609:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __DSB();
 674              		.loc 1 609 3 view .LVU115
 675              	.LBB10:
 676              	.LBI10:
 677              		.file 2 "../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 24


  21:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 25


  78:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 26


 135:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 27


 192:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 28


 249:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 678              		.loc 2 269 27 view .LVU116
 679              	.LBB11:
 270:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 680              		.loc 2 271 3 view .LVU117
 681              		.syntax unified
 682              	@ 271 "../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 683 0028 BFF34F8F 		dsb 0xF
 684              	@ 0 "" 2
 685              		.thumb
 686              		.syntax unified
 687              	.LBE11:
 688              	.LBE10:
 610:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __ISB();
 689              		.loc 1 610 3 view .LVU118
 690              	.LBB12:
 691              	.LBI12:
 258:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 692              		.loc 2 258 27 view .LVU119
 693              	.LBB13:
 260:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 694              		.loc 2 260 3 view .LVU120
 695              		.syntax unified
 696              	@ 260 "../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 697 002c BFF36F8F 		isb 0xF
 698              	@ 0 "" 2
 699              		.thumb
 700              		.syntax unified
 701              	.LBE13:
 702              	.LBE12:
 611:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 612:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Stop mode entry */
 613:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 703              		.loc 1 613 3 view .LVU121
 704              		.loc 1 613 6 is_stmt 0 view .LVU122
 705 0030 012C     		cmp	r4, #1
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 29


 706 0032 05D1     		bne	.L75
 614:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 615:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 616:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFI();
 707              		.loc 1 616 5 is_stmt 1 view .LVU123
 708              		.syntax unified
 709              	@ 616 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 710 0034 30BF     		wfi
 711              	@ 0 "" 2
 712              		.thumb
 713              		.syntax unified
 714              	.L76:
 617:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 618:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 619:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 620:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 621:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 622:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       /* Clear all pending event */
 623:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __SEV();
 624:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __WFE();
 625:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 626:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 627:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Request Wait For Event */
 628:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __WFE();
 629:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 630:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 631:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex-M55 in the System Control Register */
 632:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 715              		.loc 1 632 3 view .LVU124
 716 0036 1A69     		ldr	r2, [r3, #16]
 717 0038 22F00402 		bic	r2, r2, #4
 718 003c 1A61     		str	r2, [r3, #16]
 633:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 719              		.loc 1 633 1 is_stmt 0 view .LVU125
 720 003e 10BD     		pop	{r4, pc}
 721              	.LVL35:
 722              	.L75:
 620:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 723              		.loc 1 620 5 is_stmt 1 view .LVU126
 620:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 724              		.loc 1 620 7 is_stmt 0 view .LVU127
 725 0040 032C     		cmp	r4, #3
 726 0042 01D0     		beq	.L77
 623:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       __WFE();
 727              		.loc 1 623 7 is_stmt 1 view .LVU128
 728              		.syntax unified
 729              	@ 623 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 730 0044 40BF     		sev
 731              	@ 0 "" 2
 624:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 732              		.loc 1 624 7 view .LVU129
 733              	@ 624 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 734 0046 20BF     		wfe
 735              	@ 0 "" 2
 736              		.thumb
 737              		.syntax unified
 738              	.L77:
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 30


 628:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 739              		.loc 1 628 5 view .LVU130
 740              		.syntax unified
 741              	@ 628 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 742 0048 20BF     		wfe
 743              	@ 0 "" 2
 744              		.thumb
 745              		.syntax unified
 746 004a F4E7     		b	.L76
 747              	.L82:
 748              		.align	2
 749              	.L81:
 750 004c 00000000 		.word	.LC0
 751 0050 00480256 		.word	1442990080
 752 0054 00ED00E0 		.word	-536810240
 753              		.cfi_endproc
 754              	.LFE846:
 756              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 757              		.align	1
 758              		.global	HAL_PWR_EnterSTANDBYMode
 759              		.syntax unified
 760              		.thumb
 761              		.thumb_func
 763              	HAL_PWR_EnterSTANDBYMode:
 764              	.LFB847:
 634:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 635:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 636:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enter the whole system to Standby mode.
 637:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   The Standby mode allows achieving the lowest power consumption.
 638:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   When the system enters in Standby mode, the voltage regulator is disabled.
 639:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         The complete VCORE domain is consequently powered off.
 640:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         The PLLs, HSI oscillator, CSI oscillator, HSI48 and the HSE oscillator are
 641:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         also switched off.
 642:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         SRAM and register contents are lost except for backup domain registers
 643:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         (RTC registers, RTC backup register and backup RAM), and Standby circuitry.
 644:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   When the System exit STANDBY mode by issuing an interrupt or a
 645:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         wakeup event, the HSI RC oscillator is selected as system clock.
 646:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 647:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 648:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 649:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 765              		.loc 1 649 1 view -0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 650:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Select Standby when device enters Deepsleep */
 651:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(PWR->CPUCR, PWR_CPUCR_PDDS);
 770              		.loc 1 651 3 view .LVU132
 771 0000 074A     		ldr	r2, .L84
 772 0002 136B     		ldr	r3, [r2, #48]
 773 0004 43F00103 		orr	r3, r3, #1
 774 0008 1363     		str	r3, [r2, #48]
 652:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 653:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 654:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 775              		.loc 1 654 3 view .LVU133
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 31


 776 000a 064A     		ldr	r2, .L84+4
 777 000c 1369     		ldr	r3, [r2, #16]
 778 000e 43F00403 		orr	r3, r3, #4
 779 0012 1361     		str	r3, [r2, #16]
 655:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 656:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Ensure that all instructions are done before entering STANDBY mode */
 657:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __DSB();
 780              		.loc 1 657 3 view .LVU134
 781              	.LBB14:
 782              	.LBI14:
 269:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 783              		.loc 2 269 27 view .LVU135
 784              	.LBB15:
 785              		.loc 2 271 3 view .LVU136
 786              		.syntax unified
 787              	@ 271 "../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 788 0014 BFF34F8F 		dsb 0xF
 789              	@ 0 "" 2
 790              		.thumb
 791              		.syntax unified
 792              	.LBE15:
 793              	.LBE14:
 658:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __ISB();
 794              		.loc 1 658 3 view .LVU137
 795              	.LBB16:
 796              	.LBI16:
 258:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 797              		.loc 2 258 27 view .LVU138
 798              	.LBB17:
 260:../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799              		.loc 2 260 3 view .LVU139
 800              		.syntax unified
 801              	@ 260 "../../STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 802 0018 BFF36F8F 		isb 0xF
 803              	@ 0 "" 2
 804              		.thumb
 805              		.syntax unified
 806              	.LBE17:
 807              	.LBE16:
 659:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 660:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 661:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   __WFI();
 808              		.loc 1 661 3 view .LVU140
 809              		.syntax unified
 810              	@ 661 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c" 1
 811 001c 30BF     		wfi
 812              	@ 0 "" 2
 662:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 813              		.loc 1 662 1 is_stmt 0 view .LVU141
 814              		.thumb
 815              		.syntax unified
 816 001e 7047     		bx	lr
 817              	.L85:
 818              		.align	2
 819              	.L84:
 820 0020 00480256 		.word	1442990080
 821 0024 00ED00E0 		.word	-536810240
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 32


 822              		.cfi_endproc
 823              	.LFE847:
 825              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 826              		.align	1
 827              		.global	HAL_PWR_EnableSleepOnExit
 828              		.syntax unified
 829              		.thumb
 830              		.thumb_func
 832              	HAL_PWR_EnableSleepOnExit:
 833              	.LFB848:
 663:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 664:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 665:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Indicate SLEEP-ON-EXIT feature when returning from handler mode to
 666:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         thread mode.
 667:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Set SLEEPONEXIT bit of SCR register. When this bit is set, the
 668:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         processor re-enters Sleep mode when an interruption handling is over.
 669:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         Setting this bit is useful when the processor is expected to run
 670:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         only on interruptions handling.
 671:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 672:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 673:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 674:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 834              		.loc 1 674 1 is_stmt 1 view -0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 675:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex-M55 System Control Register */
 676:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 839              		.loc 1 676 3 view .LVU143
 840 0000 024A     		ldr	r2, .L87
 841 0002 1369     		ldr	r3, [r2, #16]
 842 0004 43F00203 		orr	r3, r3, #2
 843 0008 1361     		str	r3, [r2, #16]
 677:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 844              		.loc 1 677 1 is_stmt 0 view .LVU144
 845 000a 7047     		bx	lr
 846              	.L88:
 847              		.align	2
 848              	.L87:
 849 000c 00ED00E0 		.word	-536810240
 850              		.cfi_endproc
 851              	.LFE848:
 853              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 854              		.align	1
 855              		.global	HAL_PWR_DisableSleepOnExit
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 860              	HAL_PWR_DisableSleepOnExit:
 861              	.LFB849:
 678:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 679:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 680:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable SLEEP-ON-EXIT feature when returning from handler mode to
 681:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         thread mode.
 682:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
 683:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         processor re-enters Sleep mode when an interruption handling is over.
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 33


 684:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 685:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 686:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 687:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 862              		.loc 1 687 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 688:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex-M55 System Control Register */
 689:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 867              		.loc 1 689 3 view .LVU146
 868 0000 024A     		ldr	r2, .L90
 869 0002 1369     		ldr	r3, [r2, #16]
 870 0004 23F00203 		bic	r3, r3, #2
 871 0008 1361     		str	r3, [r2, #16]
 690:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 872              		.loc 1 690 1 is_stmt 0 view .LVU147
 873 000a 7047     		bx	lr
 874              	.L91:
 875              		.align	2
 876              	.L90:
 877 000c 00ED00E0 		.word	-536810240
 878              		.cfi_endproc
 879              	.LFE849:
 881              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 882              		.align	1
 883              		.global	HAL_PWR_EnableSEVOnPend
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 888              	HAL_PWR_EnableSEVOnPend:
 889              	.LFB850:
 691:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 692:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 693:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Enable CORTEX SEV-ON-PEND feature.
 694:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Sets SEVONPEND bit of SCR register. When this bit is set, any
 695:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         pending event / interrupt even if it's disabled or has insufficient
 696:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         priority to cause exception entry wakes up the Cortex-M55.
 697:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 698:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 699:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 700:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 890              		.loc 1 700 1 is_stmt 1 view -0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 701:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex-M55 System Control Register */
 702:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   SET_BIT(SCB->SCR, SCB_SCR_SEVONPEND_Msk);
 895              		.loc 1 702 3 view .LVU149
 896 0000 024A     		ldr	r2, .L93
 897 0002 1369     		ldr	r3, [r2, #16]
 898 0004 43F01003 		orr	r3, r3, #16
 899 0008 1361     		str	r3, [r2, #16]
 703:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 900              		.loc 1 703 1 is_stmt 0 view .LVU150
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 34


 901 000a 7047     		bx	lr
 902              	.L94:
 903              		.align	2
 904              	.L93:
 905 000c 00ED00E0 		.word	-536810240
 906              		.cfi_endproc
 907              	.LFE850:
 909              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 910              		.align	1
 911              		.global	HAL_PWR_DisableSEVOnPend
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
 916              	HAL_PWR_DisableSEVOnPend:
 917              	.LFB851:
 704:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 705:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 706:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Disable CORTEX SEVONPEND feature.
 707:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
 708:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         enabled pending causes exception entry wakes up the Cortex-M55.
 709:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 710:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 711:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 712:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 918              		.loc 1 712 1 is_stmt 1 view -0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 0
 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922              		@ link register save eliminated.
 713:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex-M55 System Control Register */
 714:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, SCB_SCR_SEVONPEND_Msk);
 923              		.loc 1 714 3 view .LVU152
 924 0000 024A     		ldr	r2, .L96
 925 0002 1369     		ldr	r3, [r2, #16]
 926 0004 23F01003 		bic	r3, r3, #16
 927 0008 1361     		str	r3, [r2, #16]
 715:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 928              		.loc 1 715 1 is_stmt 0 view .LVU153
 929 000a 7047     		bx	lr
 930              	.L97:
 931              		.align	2
 932              	.L96:
 933 000c 00ED00E0 		.word	-536810240
 934              		.cfi_endproc
 935              	.LFE851:
 937              		.section	.text.HAL_PWR_PVD_Rising_Callback,"ax",%progbits
 938              		.align	1
 939              		.weak	HAL_PWR_PVD_Rising_Callback
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 944              	HAL_PWR_PVD_Rising_Callback:
 945              	.LFB852:
 716:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 717:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 718:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  PWR PVD interrupt Rising callback
 719:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 35


 720:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 721:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_PVD_Rising_Callback(void)
 722:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 946              		.loc 1 722 1 is_stmt 1 view -0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950              		@ link register save eliminated.
 723:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 724:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
 725:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 726:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 951              		.loc 1 726 1 view .LVU155
 952 0000 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE852:
 956              		.section	.text.HAL_PWR_PVD_Falling_Callback,"ax",%progbits
 957              		.align	1
 958              		.weak	HAL_PWR_PVD_Falling_Callback
 959              		.syntax unified
 960              		.thumb
 961              		.thumb_func
 963              	HAL_PWR_PVD_Falling_Callback:
 964              	.LFB862:
 965              		.cfi_startproc
 727:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 728:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 729:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  PWR PVD interrupt Falling callback
 730:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None
 731:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 732:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_PVD_Falling_Callback(void)
 966              		.loc 1 732 13 view -0
 967              		@ args = 0, pretend = 0, frame = 0
 968              		@ frame_needed = 0, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 7047     		bx	lr
 971              		.cfi_endproc
 972              	.LFE862:
 974              		.section	.text.HAL_PWR_WKUP1_Callback,"ax",%progbits
 975              		.align	1
 976              		.weak	HAL_PWR_WKUP1_Callback
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 981              	HAL_PWR_WKUP1_Callback:
 982              	.LFB864:
 983              		.cfi_startproc
 733:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 734:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 735:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
 736:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 737:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 738:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 739:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 740:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief This function handles the PWR WAKEUP PIN interrupt request.
 741:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
 742:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 36


 743:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 744:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_WAKEUP_PIN_IRQHandler(void)
 745:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 746:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Wakeup pin EXTI line interrupt detected */
 747:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF1) != 0U)
 748:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 749:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF1 flag */
 750:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP1);
 751:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 752:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP1 interrupt user callback */
 753:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP1_Callback();
 754:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 755:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 756:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF2) != 0U)
 757:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 758:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF2 flag */
 759:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP2);
 760:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 761:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP2 interrupt user callback */
 762:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP2_Callback();
 763:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 764:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 765:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF3) != 0U)
 766:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 767:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF3 flag */
 768:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP3);
 769:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 770:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP3 interrupt user callback */
 771:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP3_Callback();
 772:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 773:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 774:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (READ_BIT(PWR->WKUPSR, PWR_WKUPSR_WKUPF4) != 0U)
 775:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 776:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Clear PWR WKUPF4 flag */
 777:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG(PWR_FLAG_WKUP4);
 778:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 779:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* PWR WKUP4 interrupt user callback */
 780:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     HAL_PWR_WKUP4_Callback();
 781:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 782:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 783:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 784:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 785:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP1 interrupt callback.
 786:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 787:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 788:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP1_Callback(void)
 984              		.loc 1 788 13 view -0
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988 0000 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE864:
 992              		.section	.text.HAL_PWR_WKUP2_Callback,"ax",%progbits
 993              		.align	1
 994              		.weak	HAL_PWR_WKUP2_Callback
 995              		.syntax unified
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 37


 996              		.thumb
 997              		.thumb_func
 999              	HAL_PWR_WKUP2_Callback:
 1000              	.LFB866:
 1001              		.cfi_startproc
 789:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 790:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 791:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP1_Callback can be implemented in the user file
 792:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 793:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 794:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 795:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 796:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP2 interrupt callback.
 797:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 798:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 799:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP2_Callback(void)
 1002              		.loc 1 799 13 view -0
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              		@ link register save eliminated.
 1006 0000 7047     		bx	lr
 1007              		.cfi_endproc
 1008              	.LFE866:
 1010              		.section	.text.HAL_PWR_WKUP3_Callback,"ax",%progbits
 1011              		.align	1
 1012              		.weak	HAL_PWR_WKUP3_Callback
 1013              		.syntax unified
 1014              		.thumb
 1015              		.thumb_func
 1017              	HAL_PWR_WKUP3_Callback:
 1018              	.LFB868:
 1019              		.cfi_startproc
 800:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 801:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 802:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP2_Callback can be implemented in the user file
 803:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 804:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 805:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 806:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 807:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP3 interrupt callback.
 808:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 809:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 810:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP3_Callback(void)
 1020              		.loc 1 810 13 view -0
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 1023              		@ link register save eliminated.
 1024 0000 7047     		bx	lr
 1025              		.cfi_endproc
 1026              	.LFE868:
 1028              		.section	.text.HAL_PWR_WKUP4_Callback,"ax",%progbits
 1029              		.align	1
 1030              		.weak	HAL_PWR_WKUP4_Callback
 1031              		.syntax unified
 1032              		.thumb
 1033              		.thumb_func
 1035              	HAL_PWR_WKUP4_Callback:
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 38


 1036              	.LFB870:
 1037              		.cfi_startproc
 811:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 812:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 813:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP3_Callback can be implemented in the user file
 814:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 815:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 816:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 817:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 818:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief PWR WKUP4 interrupt callback.
 819:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 820:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 821:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** __weak void HAL_PWR_WKUP4_Callback(void)
 1038              		.loc 1 821 13 view -0
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 1042 0000 7047     		bx	lr
 1043              		.cfi_endproc
 1044              	.LFE870:
 1046              		.section	.text.HAL_PWR_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1047              		.align	1
 1048              		.global	HAL_PWR_WAKEUP_PIN_IRQHandler
 1049              		.syntax unified
 1050              		.thumb
 1051              		.thumb_func
 1053              	HAL_PWR_WAKEUP_PIN_IRQHandler:
 1054              	.LFB854:
 745:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Wakeup pin EXTI line interrupt detected */
 1055              		.loc 1 745 1 view -0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 747:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1059              		.loc 1 747 3 view .LVU162
 745:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Wakeup pin EXTI line interrupt detected */
 1060              		.loc 1 745 1 is_stmt 0 view .LVU163
 1061 0000 10B5     		push	{r4, lr}
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 4, -8
 1064              		.cfi_offset 14, -4
 747:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1065              		.loc 1 747 7 view .LVU164
 1066 0002 134C     		ldr	r4, .L121
 1067 0004 636D     		ldr	r3, [r4, #84]
 747:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1068              		.loc 1 747 6 view .LVU165
 1069 0006 D807     		lsls	r0, r3, #31
 1070 0008 05D5     		bpl	.L105
 750:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 1071              		.loc 1 750 5 is_stmt 1 view .LVU166
 1072 000a 236D     		ldr	r3, [r4, #80]
 1073 000c 43F00103 		orr	r3, r3, #1
 1074 0010 2365     		str	r3, [r4, #80]
 753:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 1075              		.loc 1 753 5 view .LVU167
 1076 0012 FFF7FEFF 		bl	HAL_PWR_WKUP1_Callback
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 39


 1077              	.LVL36:
 1078              	.L105:
 756:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1079              		.loc 1 756 3 view .LVU168
 756:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1080              		.loc 1 756 7 is_stmt 0 view .LVU169
 1081 0016 636D     		ldr	r3, [r4, #84]
 756:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1082              		.loc 1 756 6 view .LVU170
 1083 0018 9907     		lsls	r1, r3, #30
 1084 001a 05D5     		bpl	.L106
 759:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 1085              		.loc 1 759 5 is_stmt 1 view .LVU171
 1086 001c 236D     		ldr	r3, [r4, #80]
 1087 001e 43F00203 		orr	r3, r3, #2
 1088 0022 2365     		str	r3, [r4, #80]
 762:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 1089              		.loc 1 762 5 view .LVU172
 1090 0024 FFF7FEFF 		bl	HAL_PWR_WKUP2_Callback
 1091              	.LVL37:
 1092              	.L106:
 765:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1093              		.loc 1 765 3 view .LVU173
 765:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1094              		.loc 1 765 7 is_stmt 0 view .LVU174
 1095 0028 094C     		ldr	r4, .L121
 1096 002a 636D     		ldr	r3, [r4, #84]
 765:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1097              		.loc 1 765 6 view .LVU175
 1098 002c 5A07     		lsls	r2, r3, #29
 1099 002e 05D5     		bpl	.L107
 768:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 1100              		.loc 1 768 5 is_stmt 1 view .LVU176
 1101 0030 236D     		ldr	r3, [r4, #80]
 1102 0032 43F00403 		orr	r3, r3, #4
 1103 0036 2365     		str	r3, [r4, #80]
 771:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 1104              		.loc 1 771 5 view .LVU177
 1105 0038 FFF7FEFF 		bl	HAL_PWR_WKUP3_Callback
 1106              	.LVL38:
 1107              	.L107:
 774:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1108              		.loc 1 774 3 view .LVU178
 774:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1109              		.loc 1 774 7 is_stmt 0 view .LVU179
 1110 003c 636D     		ldr	r3, [r4, #84]
 774:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1111              		.loc 1 774 6 view .LVU180
 1112 003e 1B07     		lsls	r3, r3, #28
 1113 0040 05D5     		bpl	.L104
 777:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 1114              		.loc 1 777 5 is_stmt 1 view .LVU181
 1115 0042 236D     		ldr	r3, [r4, #80]
 1116 0044 43F00803 		orr	r3, r3, #8
 1117 0048 2365     		str	r3, [r4, #80]
 780:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 1118              		.loc 1 780 5 view .LVU182
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 40


 1119 004a FFF7FEFF 		bl	HAL_PWR_WKUP4_Callback
 1120              	.LVL39:
 1121              	.L104:
 782:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 1122              		.loc 1 782 1 is_stmt 0 view .LVU183
 1123 004e 10BD     		pop	{r4, pc}
 1124              	.L122:
 1125              		.align	2
 1126              	.L121:
 1127 0050 00480256 		.word	1442990080
 1128              		.cfi_endproc
 1129              	.LFE854:
 1131              		.section	.text.HAL_PWR_ConfigAttributes,"ax",%progbits
 1132              		.align	1
 1133              		.global	HAL_PWR_ConfigAttributes
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1138              	HAL_PWR_ConfigAttributes:
 1139              	.LVL40:
 1140              	.LFB859:
 822:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 823:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 824:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****             the HAL_PWR_WKUP4_Callback can be implemented in the user file
 825:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 826:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 827:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 828:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 829:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @}
 830:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 831:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined(PWR_PRIVCFGR_PRIV0)
 832:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group3 Attributes Management Functions
 833:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *  @brief    Attributes management functions
 834:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *
 835:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @verbatim
 836:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 837:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****                        ##### PWR Attributes Functions #####
 838:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****  ===============================================================================
 839:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 840:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The PWR is able to protect register bits from being modified by non-secure
 841:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       and unprivileged accesses.
 842:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       The protection can be activated for the following features through PWR_SECCFGR and
 843:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       PWR_PRIVCFGR:
 844:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 845:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) System supply configuration.
 846:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Voltage scaling.
 847:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Low-power mode.
 848:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Wake-up (WKUP) pins.
 849:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) Voltage detection and monitoring.
 850:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) VBAT mode.
 851:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 852:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       A non-secure access to a secure-protected register bit is denied :
 853:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) The secured bits are not written (WI) with a non-secure write access.
 854:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (++) The secured bits are read as 0 (RAZ) with a non-secure read access.
 855:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 856:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..]
 857:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       After any application reset or system reset, the PWR does not filter any access
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 41


 858:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       (default configuration: non-secure, any privileged) until the trusted agent has
 859:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       programmed the security and privileged protection.
 860:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 861:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..] Secure/non-secure access filtering
 862:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       To enable the filtering access based on this attribute, the authorized master
 863:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       agent must set SECx in PWR_SECCFGR related to the PWR feature.
 864:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 865:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as secure, read and write operations are only
 866:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by a secure access.
 867:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       Non-secure read or write accesses are denied (RAZ/WI).
 868:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       An illegal secure access event is generated to the IAC (illegal access controller).
 869:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       There is no bus error generated.
 870:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as non-secure, read and write operations are
 871:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by both secure and non-secure accesses.
 872:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 873:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     [..] Privileged/unprivileged access filtering
 874:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       To enable the filtering access based on this attribute, the authorized master
 875:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       agent has to set PRIVx in PWR_PRIVCFGR related to the PWR feature.
 876:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as privileged, read and write operations are only
 877:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by a privileged access.
 878:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       Unprivileged read or write accesses are denied (RAZ/WI).
 879:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       An illegal privileged access event is generated to the IAC.
 880:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       There is no bus error generated.
 881:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       When a register is configured as unprivileged, read and write operations are
 882:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       allowed by both privileged and unprivileged accesses.
 883:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 884:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** @endverbatim
 885:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @{
 886:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 887:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 888:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 889:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Configure the PWR item attributes.
 890:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Available attributes are security and privilege protection.
 891:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Security attribute can only be set only by secure access.
 892:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Privilege attribute for secure items can be managed only by a secure
 893:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         privileged access.
 894:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @note   Privilege attribute for nsecure items can be managed  by a secure
 895:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *         privileged access or by a nsecure privileged access.
 896:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Item       : Specifies the item(s) to set attributes on.
 897:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      This parameter can be a combination of PWR_ITEMS.
 898:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Attributes : Specifies the available attribute(s).
 899:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                      This parameter can be one of PWR_ATTRIBUTES.
 900:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval None.
 901:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 902:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
 903:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1141              		.loc 1 903 1 is_stmt 1 view -0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 904:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 905:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
 1145              		.loc 1 905 3 view .LVU185
 903:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 1146              		.loc 1 903 1 is_stmt 0 view .LVU186
 1147 0000 38B5     		push	{r3, r4, r5, lr}
 1148              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 42


 1149              		.cfi_offset 3, -16
 1150              		.cfi_offset 4, -12
 1151              		.cfi_offset 5, -8
 1152              		.cfi_offset 14, -4
 1153              		.loc 1 905 3 view .LVU187
 1154 0002 20F47023 		bic	r3, r0, #983040
 1155 0006 23F0FF03 		bic	r3, r3, #255
 903:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameters */
 1156              		.loc 1 903 1 view .LVU188
 1157 000a 0546     		mov	r5, r0
 1158 000c 0C46     		mov	r4, r1
 1159              		.loc 1 905 3 view .LVU189
 1160 000e 03B9     		cbnz	r3, .L124
 1161              		.loc 1 905 3 discriminator 2 view .LVU190
 1162 0010 20B9     		cbnz	r0, .L125
 1163              	.L124:
 1164              		.loc 1 905 3 discriminator 3 view .LVU191
 1165 0012 40F28931 		movw	r1, #905
 1166              	.LVL41:
 1167              		.loc 1 905 3 discriminator 3 view .LVU192
 1168 0016 1748     		ldr	r0, .L136
 1169              	.LVL42:
 1170              		.loc 1 905 3 discriminator 3 view .LVU193
 1171 0018 FFF7FEFF 		bl	assert_failed
 1172              	.LVL43:
 1173              	.L125:
 906:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_ATTRIBUTES(Attributes));
 1174              		.loc 1 906 3 is_stmt 1 view .LVU194
 1175 001c C4F30313 		ubfx	r3, r4, #4, #4
 1176 0020 24EA0303 		bic	r3, r4, r3
 1177 0024 03F00F03 		and	r3, r3, #15
 1178              		.loc 1 906 3 is_stmt 0 discriminator 2 view .LVU195
 1179 0028 24F03302 		bic	r2, r4, #51
 1180 002c 1343     		orrs	r3, r3, r2
 1181 002e 04D0     		beq	.L126
 1182              		.loc 1 906 3 discriminator 3 view .LVU196
 1183 0030 40F28A31 		movw	r1, #906
 1184 0034 0F48     		ldr	r0, .L136
 1185 0036 FFF7FEFF 		bl	assert_failed
 1186              	.LVL44:
 1187              	.L126:
 907:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 908:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 909:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Secure item management (TZEN = 1) */
 910:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((Attributes & PWR_ITEM_ATTR_SEC_PRIV_MASK) == PWR_ITEM_ATTR_SEC_PRIV_MASK)
 1188              		.loc 1 910 3 is_stmt 1 view .LVU197
 1189              		.loc 1 910 6 is_stmt 0 view .LVU198
 1190 003a 14F0200F 		tst	r4, #32
 1191 003e 0E4B     		ldr	r3, .L136+4
 1192 0040 0DD0     		beq	.L127
 911:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 912:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Privilege item management */
 913:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((Attributes & PWR_SEC_PRIV) == PWR_SEC_PRIV)
 1193              		.loc 1 913 5 is_stmt 1 view .LVU199
 914:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 915:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR_S->SECCFGR, Item);
 1194              		.loc 1 915 7 is_stmt 0 view .LVU200
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 43


 1195 0042 1A6F     		ldr	r2, [r3, #112]
 913:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1196              		.loc 1 913 21 view .LVU201
 1197 0044 04F02204 		and	r4, r4, #34
 1198              	.LVL45:
 1199              		.loc 1 915 7 view .LVU202
 1200 0048 2A43     		orrs	r2, r2, r5
 1201 004a 1A67     		str	r2, [r3, #112]
 916:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 1202              		.loc 1 916 7 is_stmt 1 view .LVU203
 913:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1203              		.loc 1 913 8 is_stmt 0 view .LVU204
 1204 004c 222C     		cmp	r4, #34
 1205              		.loc 1 916 7 view .LVU205
 1206 004e 5A6F     		ldr	r2, [r3, #116]
 913:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1207              		.loc 1 913 8 view .LVU206
 1208 0050 01D1     		bne	.L128
 1209              	.L135:
 917:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 918:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 919:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 920:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR_S->SECCFGR, Item);
 921:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 922:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 923:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 924:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NSecure item management */
 925:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 926:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 927:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Privilege item management */
 928:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((Attributes & PWR_NSEC_PRIV) == PWR_NSEC_PRIV)
 929:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 930:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR_S->SECCFGR, Item);
 1210              		.loc 1 930 7 is_stmt 1 view .LVU207
 931:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 1211              		.loc 1 931 7 is_stmt 0 view .LVU208
 1212 0052 2A43     		orrs	r2, r2, r5
 1213 0054 01E0     		b	.L134
 1214              	.L128:
 920:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 1215              		.loc 1 920 7 is_stmt 1 view .LVU209
 921:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1216              		.loc 1 921 7 is_stmt 0 view .LVU210
 1217 0056 22EA0502 		bic	r2, r2, r5
 1218              	.L134:
 932:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 933:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 934:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 935:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR_S->SECCFGR, Item);
 936:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 1219              		.loc 1 936 7 view .LVU211
 1220 005a 5A67     		str	r2, [r3, #116]
 937:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 938:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 939:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #else
 940:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* NSecure item management (TZEN = 0) */
 941:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((Attributes & PWR_ITEM_ATTR_NSEC_PRIV_MASK) == PWR_ITEM_ATTR_NSEC_PRIV_MASK)
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 44


 942:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 943:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     /* Privilege item management */
 944:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((Attributes & PWR_NSEC_PRIV) == PWR_NSEC_PRIV)
 945:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 946:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 947:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 948:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 949:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 950:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 951:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 952:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 953:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #endif /* __ARM_FEATURE_CMSE */
 954:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1221              		.loc 1 954 1 view .LVU212
 1222 005c 38BD     		pop	{r3, r4, r5, pc}
 1223              	.LVL46:
 1224              	.L127:
 928:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1225              		.loc 1 928 5 is_stmt 1 view .LVU213
 921:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1226              		.loc 1 921 7 is_stmt 0 view .LVU214
 1227 005e E943     		mvns	r1, r5
 930:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 1228              		.loc 1 930 7 view .LVU215
 1229 0060 1A6F     		ldr	r2, [r3, #112]
 928:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1230              		.loc 1 928 21 view .LVU216
 1231 0062 04F01104 		and	r4, r4, #17
 1232              	.LVL47:
 930:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       SET_BIT(PWR->PRIVCFGR, Item);
 1233              		.loc 1 930 7 view .LVU217
 1234 0066 0A40     		ands	r2, r2, r1
 1235 0068 1A67     		str	r2, [r3, #112]
 931:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1236              		.loc 1 931 7 is_stmt 1 view .LVU218
 928:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1237              		.loc 1 928 8 is_stmt 0 view .LVU219
 1238 006a 112C     		cmp	r4, #17
 931:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1239              		.loc 1 931 7 view .LVU220
 1240 006c 5A6F     		ldr	r2, [r3, #116]
 928:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1241              		.loc 1 928 8 view .LVU221
 1242 006e F0D0     		beq	.L135
 935:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       CLEAR_BIT(PWR->PRIVCFGR, Item);
 1243              		.loc 1 935 7 is_stmt 1 view .LVU222
 936:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1244              		.loc 1 936 7 is_stmt 0 view .LVU223
 1245 0070 0A40     		ands	r2, r2, r1
 1246 0072 F2E7     		b	.L134
 1247              	.L137:
 1248              		.align	2
 1249              	.L136:
 1250 0074 00000000 		.word	.LC0
 1251 0078 00480256 		.word	1442990080
 1252              		.cfi_endproc
 1253              	.LFE859:
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 45


 1255              		.section	.text.HAL_PWR_GetConfigAttributes,"ax",%progbits
 1256              		.align	1
 1257              		.global	HAL_PWR_GetConfigAttributes
 1258              		.syntax unified
 1259              		.thumb
 1260              		.thumb_func
 1262              	HAL_PWR_GetConfigAttributes:
 1263              	.LVL48:
 1264              	.LFB860:
 955:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 956:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 957:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** /**
 958:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @brief  Get attribute(s) of a PWR item.
 959:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  Item        : Specifies the item(s) to get attributes on.
 960:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                       This parameter can be one of PWR_ITEMS.
 961:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @param  pAttributes : Pointer to return attribute(s).
 962:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *                       Returned value could be on of PWR_ATTRIBUTES.
 963:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   * @retval HAL Status.
 964:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   */
 965:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_GetConfigAttributes(uint32_t Item, uint32_t *pAttributes)
 966:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** {
 1265              		.loc 1 966 1 is_stmt 1 view -0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 967:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   uint32_t attributes;
 1269              		.loc 1 967 3 view .LVU225
 968:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 969:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check attribute pointer */
 970:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if (pAttributes == NULL)
 1270              		.loc 1 970 3 view .LVU226
 966:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   uint32_t attributes;
 1271              		.loc 1 966 1 is_stmt 0 view .LVU227
 1272 0000 38B5     		push	{r3, r4, r5, lr}
 1273              		.cfi_def_cfa_offset 16
 1274              		.cfi_offset 3, -16
 1275              		.cfi_offset 4, -12
 1276              		.cfi_offset 5, -8
 1277              		.cfi_offset 14, -4
 966:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   uint32_t attributes;
 1278              		.loc 1 966 1 view .LVU228
 1279 0002 0446     		mov	r4, r0
 1280              		.loc 1 970 6 view .LVU229
 1281 0004 0D46     		mov	r5, r1
 1282 0006 E1B1     		cbz	r1, .L144
 971:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 972:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     return HAL_ERROR;
 973:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 974:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 975:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check the parameter */
 976:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
 1283              		.loc 1 976 3 is_stmt 1 view .LVU230
 1284 0008 20F47023 		bic	r3, r0, #983040
 1285 000c 23F0FF03 		bic	r3, r3, #255
 1286 0010 03B9     		cbnz	r3, .L140
 1287              		.loc 1 976 3 is_stmt 0 discriminator 2 view .LVU231
 1288 0012 20B9     		cbnz	r0, .L141
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 46


 1289              	.L140:
 1290              		.loc 1 976 3 discriminator 3 view .LVU232
 1291 0014 4FF47471 		mov	r1, #976
 1292              	.LVL49:
 1293              		.loc 1 976 3 discriminator 3 view .LVU233
 1294 0018 0B48     		ldr	r0, .L147
 1295              	.LVL50:
 1296              		.loc 1 976 3 discriminator 3 view .LVU234
 1297 001a FFF7FEFF 		bl	assert_failed
 1298              	.LVL51:
 1299              	.L141:
 977:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 978:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 979:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 980:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* Check item security */
 981:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((PWR->SECCFGR & Item) == Item)
 1300              		.loc 1 981 3 is_stmt 1 view .LVU235
 1301              		.loc 1 981 11 is_stmt 0 view .LVU236
 1302 001e 0B4B     		ldr	r3, .L147+4
 1303 0020 1A6F     		ldr	r2, [r3, #112]
 982:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 983:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((PWR->PRIVCFGR & Item) == Item)
 1304              		.loc 1 983 13 view .LVU237
 1305 0022 5B6F     		ldr	r3, [r3, #116]
 981:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 1306              		.loc 1 981 6 view .LVU238
 1307 0024 34EA0202 		bics	r2, r4, r2
 1308 0028 06D1     		bne	.L142
 1309              		.loc 1 983 5 is_stmt 1 view .LVU239
 984:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 985:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_SEC_PRIV;
 1310              		.loc 1 985 18 is_stmt 0 view .LVU240
 1311 002a 9C43     		bics	r4, r4, r3
 1312              	.LVL52:
 1313              		.loc 1 985 18 view .LVU241
 1314 002c 14BF     		ite	ne
 1315 002e 2023     		movne	r3, #32
 1316 0030 2223     		moveq	r3, #34
 1317              	.L143:
 1318              	.LVL53:
 986:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 987:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 988:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 989:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_SEC_NPRIV;
 990:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 991:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 992:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
 993:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
 994:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     if ((PWR->PRIVCFGR & Item) == Item)
 995:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 996:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_NSEC_PRIV;
 997:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 998:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     else
 999:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
1000:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****       attributes = PWR_NSEC_NPRIV;
1001:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
1002:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 47


1003:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #else
1004:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   if ((PWR->PRIVCFGR & Item) == Item)
1005:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
1006:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     attributes = PWR_NSEC_PRIV;
1007:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
1008:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   else
1009:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   {
1010:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     attributes = PWR_NSEC_NPRIV;
1011:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
1012:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** #endif /* __ARM_FEATURE_CMSE */
1013:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
1014:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   /* return value */
1015:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   *pAttributes = attributes;
 1319              		.loc 1 1015 3 is_stmt 1 view .LVU242
1016:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
1017:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   return HAL_OK;
 1320              		.loc 1 1017 10 is_stmt 0 view .LVU243
 1321 0032 0020     		movs	r0, #0
1015:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** 
 1322              		.loc 1 1015 16 view .LVU244
 1323 0034 2B60     		str	r3, [r5]
 1324              		.loc 1 1017 3 is_stmt 1 view .LVU245
 1325              	.LVL54:
 1326              	.L139:
1018:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c **** }
 1327              		.loc 1 1018 1 is_stmt 0 view .LVU246
 1328 0036 38BD     		pop	{r3, r4, r5, pc}
 1329              	.LVL55:
 1330              	.L142:
 994:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     {
 1331              		.loc 1 994 5 is_stmt 1 view .LVU247
 996:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1332              		.loc 1 996 18 is_stmt 0 view .LVU248
 1333 0038 9C43     		bics	r4, r4, r3
 1334              	.LVL56:
 996:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****     }
 1335              		.loc 1 996 18 view .LVU249
 1336 003a 14BF     		ite	ne
 1337 003c 1023     		movne	r3, #16
 1338 003e 1123     		moveq	r3, #17
 1339 0040 F7E7     		b	.L143
 1340              	.LVL57:
 1341              	.L144:
 972:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 1342              		.loc 1 972 12 view .LVU250
 1343 0042 0120     		movs	r0, #1
 1344              	.LVL58:
 972:../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_pwr.c ****   }
 1345              		.loc 1 972 12 view .LVU251
 1346 0044 F7E7     		b	.L139
 1347              	.L148:
 1348 0046 00BF     		.align	2
 1349              	.L147:
 1350 0048 00000000 		.word	.LC0
 1351 004c 00480256 		.word	1442990080
 1352              		.cfi_endproc
 1353              	.LFE860:
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 48


 1355              		.text
 1356              	.Letext0:
 1357              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1358              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1359              		.file 5 "../../STM32Cube_FW_N6/Drivers/CMSIS/Include/core_cm55.h"
 1360              		.file 6 "../../STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 1361              		.file 7 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 1362              		.file 8 "../../STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_pwr.h"
 1363              		.file 9 "Inc/stm32n6xx_hal_conf.h"
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 49


DEFINED SYMBOLS
                            *ABS*:00000000 stm32n6xx_hal_pwr.c
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:26     .text.HAL_PWR_DeInit:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:32     .text.HAL_PWR_DeInit:00000000 HAL_PWR_DeInit
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:45     .text.HAL_PWR_EnableBkUpAccess:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:51     .text.HAL_PWR_EnableBkUpAccess:00000000 HAL_PWR_EnableBkUpAccess
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:67     .text.HAL_PWR_EnableBkUpAccess:00000008 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:72     .text.HAL_PWR_DisableBkUpAccess:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:78     .text.HAL_PWR_DisableBkUpAccess:00000000 HAL_PWR_DisableBkUpAccess
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:94     .text.HAL_PWR_DisableBkUpAccess:00000008 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:103    .text.HAL_PWR_ConfigPVD:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:109    .text.HAL_PWR_ConfigPVD:00000000 HAL_PWR_ConfigPVD
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:209    .text.HAL_PWR_ConfigPVD:00000094 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:216    .text.HAL_PWR_EnablePVD:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:222    .text.HAL_PWR_EnablePVD:00000000 HAL_PWR_EnablePVD
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:239    .text.HAL_PWR_EnablePVD:0000000c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:244    .text.HAL_PWR_DisablePVD:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:250    .text.HAL_PWR_DisablePVD:00000000 HAL_PWR_DisablePVD
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:267    .text.HAL_PWR_DisablePVD:0000000c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:272    .text.HAL_PWR_EnableWakeUpPin:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:278    .text.HAL_PWR_EnableWakeUpPin:00000000 HAL_PWR_EnableWakeUpPin
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:340    .text.HAL_PWR_EnableWakeUpPin:00000050 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:346    .text.HAL_PWR_DisableWakeUpPin:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:352    .text.HAL_PWR_DisableWakeUpPin:00000000 HAL_PWR_DisableWakeUpPin
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:415    .text.HAL_PWR_DisableWakeUpPin:00000058 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:421    .text.HAL_PWR_GetWakeupFlag:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:427    .text.HAL_PWR_GetWakeupFlag:00000000 HAL_PWR_GetWakeupFlag
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:469    .text.HAL_PWR_GetWakeupFlag:00000024 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:475    .text.HAL_PWR_ClearWakeupFlag:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:481    .text.HAL_PWR_ClearWakeupFlag:00000000 HAL_PWR_ClearWakeupFlag
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:529    .text.HAL_PWR_ClearWakeupFlag:0000002c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:535    .text.HAL_PWR_EnterSLEEPMode:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:541    .text.HAL_PWR_EnterSLEEPMode:00000000 HAL_PWR_EnterSLEEPMode
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:622    .text.HAL_PWR_EnterSLEEPMode:00000034 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:628    .text.HAL_PWR_EnterSTOPMode:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:634    .text.HAL_PWR_EnterSTOPMode:00000000 HAL_PWR_EnterSTOPMode
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:750    .text.HAL_PWR_EnterSTOPMode:0000004c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:757    .text.HAL_PWR_EnterSTANDBYMode:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:763    .text.HAL_PWR_EnterSTANDBYMode:00000000 HAL_PWR_EnterSTANDBYMode
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:820    .text.HAL_PWR_EnterSTANDBYMode:00000020 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:826    .text.HAL_PWR_EnableSleepOnExit:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:832    .text.HAL_PWR_EnableSleepOnExit:00000000 HAL_PWR_EnableSleepOnExit
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:849    .text.HAL_PWR_EnableSleepOnExit:0000000c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:854    .text.HAL_PWR_DisableSleepOnExit:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:860    .text.HAL_PWR_DisableSleepOnExit:00000000 HAL_PWR_DisableSleepOnExit
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:877    .text.HAL_PWR_DisableSleepOnExit:0000000c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:882    .text.HAL_PWR_EnableSEVOnPend:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:888    .text.HAL_PWR_EnableSEVOnPend:00000000 HAL_PWR_EnableSEVOnPend
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:905    .text.HAL_PWR_EnableSEVOnPend:0000000c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:910    .text.HAL_PWR_DisableSEVOnPend:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:916    .text.HAL_PWR_DisableSEVOnPend:00000000 HAL_PWR_DisableSEVOnPend
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:933    .text.HAL_PWR_DisableSEVOnPend:0000000c $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:938    .text.HAL_PWR_PVD_Rising_Callback:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:944    .text.HAL_PWR_PVD_Rising_Callback:00000000 HAL_PWR_PVD_Rising_Callback
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:957    .text.HAL_PWR_PVD_Falling_Callback:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:963    .text.HAL_PWR_PVD_Falling_Callback:00000000 HAL_PWR_PVD_Falling_Callback
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:975    .text.HAL_PWR_WKUP1_Callback:00000000 $t
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 50


C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:981    .text.HAL_PWR_WKUP1_Callback:00000000 HAL_PWR_WKUP1_Callback
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:993    .text.HAL_PWR_WKUP2_Callback:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:999    .text.HAL_PWR_WKUP2_Callback:00000000 HAL_PWR_WKUP2_Callback
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1011   .text.HAL_PWR_WKUP3_Callback:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1017   .text.HAL_PWR_WKUP3_Callback:00000000 HAL_PWR_WKUP3_Callback
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1029   .text.HAL_PWR_WKUP4_Callback:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1035   .text.HAL_PWR_WKUP4_Callback:00000000 HAL_PWR_WKUP4_Callback
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1047   .text.HAL_PWR_WAKEUP_PIN_IRQHandler:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1053   .text.HAL_PWR_WAKEUP_PIN_IRQHandler:00000000 HAL_PWR_WAKEUP_PIN_IRQHandler
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1127   .text.HAL_PWR_WAKEUP_PIN_IRQHandler:00000050 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1132   .text.HAL_PWR_ConfigAttributes:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1138   .text.HAL_PWR_ConfigAttributes:00000000 HAL_PWR_ConfigAttributes
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1250   .text.HAL_PWR_ConfigAttributes:00000074 $d
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1256   .text.HAL_PWR_GetConfigAttributes:00000000 $t
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1262   .text.HAL_PWR_GetConfigAttributes:00000000 HAL_PWR_GetConfigAttributes
C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s:1350   .text.HAL_PWR_GetConfigAttributes:00000048 $d
                           .group:00000000 wm4.0.edffc6ad2f5eb1e671bbefdf8c481eb3
                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.e6f895f5dec93fd886896ef3aa220611
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.newlib.h.7.a37ffbe9e5aff74303f4e60b1cc1c01b
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.3a8f01490e8852464e9fcb69092e9c75
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
ARM GAS  C:\Users\Antonio\AppData\Local\Temp\ccFJisad.s 			page 51


                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8

UNDEFINED SYMBOLS
assert_failed
